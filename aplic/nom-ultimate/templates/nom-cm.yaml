apiVersion: v1
kind: ConfigMap
metadata:
  name: nom-ultimate-cm
data:
  version: "1.5.0+20211100.162"
  appVersion: "2021.02"
  {{- include "helm-lib.confirmEula" . | nindent 2 }}

  # NOM Ultimate is always mixed mode
  nom.mixedMode: "true"

  {{- if .Values.global.containerizedMode }}
  {{- fail "containerized Mode NOM deployment is not supported in this chart ." }}
  {{- end }}

  {{- if not .Values.global.nnmi.isSelected }}
  {{- if .Values.global.nnmi.host }}
  # if NNMi host is defined, then port and user must also be defined
  nnmi.host: {{ .Values.global.nnmi.host | quote }}
  nnmi.port: {{ required "Must define global.nnmi.port" .Values.global.nnmi.port | quote }}
  nnmi.url: "{{ .Values.global.nnmi.host }}:{{ .Values.global.nnmi.port }}"
  nnmi.user: {{ required "Must define global.nnmi.user" .Values.global.nnmi.user | quote }}
  nnmi.passwordKey: "EXT_NNM_USER_PASSWD_KEY"

  # NNMi failover host is completely optional
  {{- if .Values.global.nnmi.failoverHost }}
  nnmi.failoverHost: {{ .Values.global.nnmi.failoverHost | quote }}
  nnmi.failoverUrl: "{{ .Values.global.nnmi.failoverHost }}:{{ .Values.global.nnmi.port }}"
  {{- else }}
  nnmi.failoverHost: "<none>"
  nnmi.failoverUrl: "<none>"
  {{- end }}

  {{- else }}
  {{- if .Values.nom }}
  {{- fail "Please specify containerizedMode, nnm, na details under global instead of under nom" }}
  {{- end }}
  # NNMi host is NOT defined, hence port, URL, etc. are all “<none>”
  nnmi.host: "<none>"
  nnmi.port: "<none>"
  nnmi.url: "<none>"
  nnmi.user: "<none>"
  nnmi.passwordKey: "<none>"
  nnmi.failoverHost: "<none>"
  nnmi.failoverUrl: "<none>"
  {{- end }}

  {{- else }}
  {{- if .Values.nom }}
  {{- fail "Please specify containerizedMode, nnm, na details under global instead of under nom" }}
  {{- end }}
  nnmi.host: {{ required "Must define global.nnmi.host" .Values.global.nnmi.host | quote }}
  nnmi.port: {{ required "Must define global.nnmi.port" .Values.global.nnmi.port | quote }}
  nnmi.url: "{{ .Values.global.nnmi.host }}:{{ .Values.global.nnmi.port }}"
  nnmi.user: {{ required "Must define global.nnmi.user" .Values.global.nnmi.user | quote }}
  nnmi.passwordKey: "EXT_NNM_USER_PASSWD_KEY"

  # NNMi failover host is completely optional
  {{- if .Values.global.nnmi.failoverHost }}
  nnmi.failoverHost: {{ .Values.global.nnmi.failoverHost | quote }}
  nnmi.failoverUrl: "{{ .Values.global.nnmi.failoverHost }}:{{ .Values.global.nnmi.port }}"
  {{- else }}
  nnmi.failoverHost: "<none>"
  nnmi.failoverUrl: "<none>"
  {{- end }}
  {{- end }}

  {{- if not .Values.global.na.isSelected }}
  {{- if .Values.global.na.host }}
  # if NA host is defined, then port must also be defined
  na.host: {{ .Values.global.na.host | quote }}
  na.port: {{ required "Must define global.na.port" .Values.global.na.port | quote }}
  na.url: "{{ .Values.global.na.host }}:{{ .Values.global.na.port }}"
  {{- else }}
  {{- if .Values.nom }}
  {{- fail "Please specify containerizedMode, nnm, na details under global instead of under nom" }}
  {{- end }}
  # NA host is NOT defined, hence port, URL, etc. are all “<none>”
  na.host: "<none>"
  na.port: "<none>"
  na.url: "<none>"
  {{- end }}
  {{- else }}
  {{- if .Values.nom }}
  {{- fail "Please specify containerizedMode, nnm, na details under global instead of under nom" }}
  {{- end }}
  na.host: {{ required "Must define global.na.host" .Values.global.na.host | quote }}
  na.port: {{ required "Must define global.na.port" .Values.global.na.port | quote }}
  na.url: "{{ .Values.global.na.host }}:{{ .Values.global.na.port }}"
  {{- end }}



  # if COSO, then Vertica is required (either embeddeded (POC only) or external)
  {{- if .Values.global.coso.isSelected }}
  # copy Vertica connection details for NOM pods to use
  {{- if .Values.global.vertica.embedded }}
  vertica.host: "itom-di-vertica-svc"
  vertica.port: "5444"
  vertica.db: "itomdb"
  vertica.username: "dbadmin"
  vertica.passwordKey: "ITOMDI_DBA_PASSWORD_KEY"
  vertica.username_ro: "dbadmin"
  vertica.passwordKey_ro: "ITOMDI_DBA_PASSWORD_KEY"
  vertica.schema: {{ printf "mf_shared_%s_%s" .Values.global.di.tenant .Values.global.di.deployment | quote }}
  vertica.useSsl: "true"

  {{- else }}     #  external Vertica

  {{- if eq .Values.global.vertica.host "itom-di-vertica-svc" }}
  {{- fail "Error: You must define Vertica host, port, rwuser and db for external Vertica" }}
  {{- end }}

  vertica.host: {{ required "Must provide Vertica host" .Values.global.vertica.host | quote }}
  vertica.port: {{ required "Must provide Vertica port" .Values.global.vertica.port | quote }}
  vertica.db: {{ required "Must provide Vertica DB name" .Values.global.vertica.db | quote }}
  vertica.username: {{ required "Must provide Vertica user name with read-write access" .Values.global.vertica.rwuser | quote }}
  vertica.passwordKey: "ITOMDI_DBA_PASSWORD_KEY"  # this should not be changed.
  vertica.username_ro: {{ required "Must provide Vertica user name with read-only access" .Values.global.vertica.rouser | quote }}
  vertica.passwordKey_ro: "ITOMDI_ROUSER_PASSWORD_KEY"  # this should not be changed.
  vertica.schema: {{ printf "mf_shared_%s_%s" .Values.global.di.tenant .Values.global.di.deployment | quote }}
  vertica.useSsl: {{ .Values.global.vertica.tlsEnabled | quote }}
  {{- end }}
  {{- end }}

  # For MinIO
  {{- if .Values.global.minio.isSelected }}
  minio.accessKey: "ITOMDI_MINIO_CLIENT_ACCESS_KEY"
  minio.secretKey: "ITOMDI_MINIO_CLIENT_SECRET_KEY"
  {{- end }}
  # For AWS
  {{- if eq .Values.global.cluster.k8sProvider "aws" }}
  minio.accessKey: "ITOMDI_S3_ADMIN_ACCESS_KEY"
  minio.secretKey: "ITOMDI_S3_ADMIN_SECRET_KEY"
  aws.region: {{ .Values.itomdiadministration.diadmin.config.s3.region }}
  aws.host: s3.{{ .Values.itomdiadministration.diadmin.config.s3.region }}.amazonaws.com
  {{- end }}

  {{- if and (not .Values.global.coso.isSelected) (not .Values.global.bvd.isSelected) }}
  {{- fail "Error: Invalid configuration: neither COSO nor BVD is selected" }}
  {{- end }}

  {{- if and (not .Values.global.coso.isSelected) .Values.global.cosoMonitoring.isSelected }}
  {{- fail "Error: Invalid configuration: COSO is not selected but COSO Monitoring is selected" }}
  {{- end }}

  {{- if eq .Values.autopass.deployment.database.dbName .Values.bvd.deployment.database.dbName }}
  {{- fail "Error: You must specify a different database name (for the parameter deployment.database.dbName) for each of these services IDM, Autopass and BVD" }}
  {{- end }}
  {{- if eq .Values.autopass.deployment.database.dbName .Values.idm.deployment.database.dbName }}
  {{- fail "Error: You must specify a different database name (for the parameter deployment.database.dbName) for each of these services IDM, Autopass and BVD" }}
  {{- end }}
  {{- if eq .Values.bvd.deployment.database.dbName .Values.idm.deployment.database.dbName }}
  {{- fail "Error: You must specify a different database name (for the parameter deployment.database.dbName) for each of these services IDM, Autopass and BVD" }}
  {{- end }}

  # Determine the datasource to be used based on values provided by user in values.yaml
  {{- if .Values.global.perfTroubleshooting.isSelected }}

  # During upgrade if the user uses nomreportingcontent.sybase.*, inform user to change to new property
  {{- if .Values.nomreportingcontent.sybase }}
  {{- if .Values.nomreportingcontent.sybase.host }}
  {{- fail "Detected legacy property for sybase.host, please use itomnomcosodataaccess.sybase.host instead" }}
  {{- end }}
  {{- if .Values.nomreportingcontent.sybase.port }}
  {{- fail "Detected legacy property for sybase.port, please use itomnomcosodataaccess.sybase.port instead" }}
  {{- end }}
  {{- if .Values.nomreportingcontent.sybase.user }}
  {{- fail "Detected legacy property for sybase.user, please use itomnomcosodataaccess.sybase.user instead" }}
  {{- end }}
  {{- if .Values.nomreportingcontent.sybase.db }}
  {{- fail "Detected legacy property for sybase.db, please use itomnomcosodataaccess.sybase.db instead" }}
  {{- end }}
  {{- end }}

  # perfT flag selected but coso flag or sybase details not provided.
  {{- if and (not .Values.global.coso.isSelected) (not .Values.itomnomcosodataaccess.sybase.host) }}
  {{- fail "Error: Invalid configuration: Datasource cannot be determined for Performance Troubleshooting. Neither COSO nor Sybase details are provided." }}
  {{- end }}

  # Coso datasource
  {{- if and ( .Values.global.coso.isSelected) (not .Values.itomnomcosodataaccess.sybase.host) }}
  perfTroubleshooting.datasource: "coso"
  {{- end }}

  # NPS datasource
  {{- if and (not .Values.global.coso.isSelected) ( .Values.itomnomcosodataaccess.sybase.host) }}
  perfTroubleshooting.datasource: "nps"
  {{- end }}

  # Both Coso and NPS datasources
  {{- if and ( .Values.global.coso.isSelected) ( .Values.itomnomcosodataaccess.sybase.host) }}
  perfTroubleshooting.datasource: "coso,nps"
  {{- end }}
  {{- end }}

  # determine if COSO, Traffic, and MinIO flags are all consistent
  {{- if .Values.global.coso.isSelected }}
  {{- if .Values.global.traffic.isSelected }}
  {{  if and (not .Values.global.minio.isSelected) (not (eq .Values.global.cluster.k8sProvider "aws")) }}
  {{- fail "If traffic feature is enabled (global.traffic.isSelected:true) ,minIO service should also be defined (global.minio.isSelected:true) for non AWS deployment." }}
  {{- end }}
  {{- end }}
  {{- if (and (not .Values.global.traffic.isSelected) .Values.global.minio.isSelected) }}
  {{- fail "You have defined global.minio.isSelected=true, but you do not have Traffic feature enabled." }}
  {{- end }}
  {{- else }}
  {{- if .Values.global.minio.isSelected }}
  {{- fail "You have defined global.minio.isSelected=true but you do not have COSO enabled." }}
  {{- end }}
  {{- end }}

  # make sure deploySize is one of allowed values, or fail
  {{ $size := .Values.global.nom.deploySize }}
  {{- if or (eq $size "demo") (eq $size "micro") (eq $size "small") (eq $size "medium") (eq $size "large") (eq $size "vlarge") (eq $size "global-medium") (eq $size "global-large") }}
  deploySize: {{ printf "%s" $size }}
  {{- else }}
  {{- fail (printf "global.nom.deploySize has invalid value: %s" $size) }}
  {{- end }}

