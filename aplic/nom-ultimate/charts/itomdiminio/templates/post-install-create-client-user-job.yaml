{{ $scheme := "http" }}
{{- if .Values.diminio.tls.enabled }}
{{ $scheme = "https" }}
{{ end }}
{{ $alias := "clientuser" }}
{{ $policy := "clientuserpolicy" }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "minio.fullname" . }}-make-client-user-job-{{ randAlphaNum 7 | lower }}"
  
spec:
  template:
    metadata:
      name: itom-di-minio-job
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.group }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
      containers:
        - name: minio
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.docker.image }}:{{ .Values.global.docker.imageTag }}
          imagePullPolicy: IfNotPresent
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "minio.fullname" . }}-secret
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "minio.fullname" . }}-secret
                  key: secretkey
            - name: MINIO_CLIENT_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  {{- if .Values.global.secretStorage }}
                  {{- if (eq (.Values.global.secretStorage | toString) "k8s") }}
                  name: {{ .Values.global.secretStorageName }}
                  key: {{ .Values.diminio.clientAccessKey }}
                  {{- end }}
                  {{- else if .Values.global.initSecrets }}
                  name: {{ .Values.global.initSecrets }}
                  key: {{ .Values.diminio.clientAccessKey }}_B64
                  {{- end }}

            - name: MINIO_CLIENT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  {{- if .Values.global.secretStorage }}
                  {{- if (eq (.Values.global.secretStorage | toString) "k8s") }}
                  name: {{ .Values.global.secretStorageName }}
                  key: {{ .Values.diminio.clientSecretKey }}
                  {{- end }}
                  {{- else if .Values.global.initSecrets }}
                  name: {{ .Values.global.initSecrets }}
                  key: {{ .Values.diminio.clientSecretKey }}_B64
                  {{- end }}
          {{- if not .Values.diminio.tls.enabled }}
          command: ['sh', '-c', " ./mc -C /minio alias set {{ $alias }} {{ $scheme }}://{{ .Values.global.externalAccessHost }}:{{ template "minio.azure_port" . }}    $MINIO_ACCESS_KEY  $MINIO_SECRET_KEY  --api S3v4 &&(until ./mc -C /minio admin info {{ $alias }} |grep -ow '0 drives offline' ; do echo waiting for minio service ; sleep 2; done ;) && ./mc -C /minio admin user add {{ $alias }}  $MINIO_CLIENT_ACCESS_KEY  $MINIO_CLIENT_SECRET_KEY  && ./mc -C /minio admin  policy add  {{ $alias }} {{ $policy }} /minio/client-policy.json && ./mc -C /minio admin policy set {{ $alias }} {{  $policy }} user=$MINIO_CLIENT_ACCESS_KEY  " ]
          {{- else }}
          command: ['sh', '-c', "mkdir -p /minio/certs/CAs && ln -s /var/run/secrets/boostport.com/issue_ca.crt /minio/certs/CAs/public.crt &&  ./mc -C /minio alias set {{ $alias }} {{ $scheme }}://{{ .Values.global.externalAccessHost }}:{{ template "minio.azure_port" . }}   $MINIO_ACCESS_KEY  $MINIO_SECRET_KEY  --api S3v4 && (until ./mc -C /minio admin info {{ $alias }} |grep -ow '0 drives offline' ; do echo waiting for minio service ; sleep 2; done ;) && ./mc -C /minio admin user add {{ $alias }}  $MINIO_CLIENT_ACCESS_KEY  $MINIO_CLIENT_SECRET_KEY  && ./mc -C /minio admin  policy add  {{ $alias }} {{ $policy }} /minio/client-policy.json && ./mc -C /minio admin policy set {{ $alias }} {{ $policy }} user=$MINIO_CLIENT_ACCESS_KEY " ]
          {{ end }}
          volumeMounts:
            - name: vault-token
              mountPath: /var/run/secrets/boostport.com    
      serviceAccount: {{ .Values.deployment.rbac.serviceAccount | default "itom-di-minio-sa" }}
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount | default "itom-di-minio-sa" }}    
      initContainers:
        {{- include "helm-lib.waitForVault" . | nindent 6 }}
      - env:
          - name: VAULT_ROLE_ID
            value: {{ .Values.global.vaultRoleId }}
          - name: CERT_COMMON_NAME
            value: "Realm:RE,Common_Name:itom-di-minio-hook;Realm:RID,Common_Name:itom-di-minio-hook"
        {{- if and .Values.global.vaultInit.registry .Values.global.vaultInit.orgName }}
        image: {{ .Values.global.vaultInit.registry }}/{{ .Values.global.vaultInit.orgName }}/{{ .Values.global.vaultInit.image }}:{{ .Values.global.vaultInit.imageTag }}
        {{- else}}
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.vaultInit.image }}:{{ .Values.global.vaultInit.imageTag }}
        {{- end}}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        name: install
        resources: {}
        securityContext:
          runAsUser: {{ .Values.global.securityContext.user }}          
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
          - mountPath: /var/run/secrets/boostport.com
            name: vault-token
      restartPolicy: Never
    {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{ toYaml . }}
    {{- end }}
      terminationGracePeriodSeconds: 0
      volumes:
        - name: vault-token
          emptyDir: {}
