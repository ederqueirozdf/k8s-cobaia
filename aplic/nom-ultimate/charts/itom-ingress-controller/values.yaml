# Default values for nginx-ingress-controller.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Consuming charts can declare a namePrefix which will cause all names (service names, deployment names, etc.)
# to be prefixed with the specified value, instead of default "itom" prefix.  This enables multiple
# instances of the chart in a single namespace.
namePrefix:

# Consuming charts can declare they want backwards-compatible service name, i.e. prefixed with
# Default prefixed with Helm "Release.Name".
backwardsCompatServiceName: true

# Any Capability using tcp services can specify the cm name here and it will be provided as argument to ingress Controller in deployment
tcpServiceConfigmap:

# When Set to false,Default backend service will no longer be a required parameter and won't be provided as an argument in deployment.
defaultBackendRequired: true

deployment:
  rbac:
    serviceAccountName:

global:
  k8sProvider: ""
  # For compatible with the existing suite config
  cluster:
    k8sProvider: ""
  externalAccessPort:
  docker:
    # set the global.docker.registry and orgName to your internal Docker registry/org
    registry: docker.io
    orgName: hpeswitom
    imagePullSecret: ""
    imagePullPolicy: IfNotPresent
  # persistence.enabled=true means that the PVCs are expected to be dynamically created by the composition chart
  # Otherwise, persistence.logVolumeClaim is a persistent volume claim for storing data files.
  # If all of the above are undefined, then temporary ephemeral storage will be created (only if isDemo=true).
  persistence:
    enabled: false
    logVolumeClaim:
  # if isDemo is true, this will allow use of ephemeral storage and other POC concepts
  isDemo: false

  # Some cloud providers allow you to specify the loadBalancerIP. Refer to the doc of cloud provider for details
  loadBalancer:
    ip:
    annotations: {}
    sourceRanges: []

  setFqdnInIngress: true

  ## If you're providing your own original certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  tls:
    cert: ""
    key: ""
  securityContext:
    user: 1999
    fsGroup: 1999
  vaultInit:
    image: kubernetes-vault-init
    imageTag: 0.14.0-008
  vaultRenew:
    image: kubernetes-vault-renew
    imageTag: 0.14.0-008
  busybox:
    image: itom-busybox
    imageTag: 1.37.0-003
  externalAccessHost: "itom.integraecom.com"
  vaultAppRole: ""
  rbac:
    # Specifies whether a ServiceAccount should be created
    serviceAccountCreate: true
    # Specifies whether RBAC resources should be created
    roleCreate: true
    clusterRoleCreate: false
  nginx:
    annotationPrefix: ingress.kubernetes.io
    # Support the legacy parameter settings
    httpsPort:
    defaultBackendService: ""

nginx:
  ingressClass: "nginx"
  defaultBackendService: ""
  secretName: nginx-default-secret
  image: itom-nginx-ingress
  imageTag: 0.20.0-0017
  # nginx default configuration
  configuration:
    enable-vts-status: "true"
    body-size: 4096m
    ssl-protocols: TLSv1.2
    ssl-ciphers: ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-SHA256:AES256-SHA256
    map-hash-bucket-size: "32"
    server-name-hash-bucket-size: "128"
    server-name-hash-max-size: "512"
    proxy-read-timeout: "720"
    proxy-send-timeout: "720"
    server-tokens: "false"
    worker-processes: "4"
    proxy-buffer-size: 256k
    proxy-body-size: 20m
  deploymentAnnotations:
    deployment.microfocus.com/default-replica-count: "2"
    deployment.microfocus.com/runlevel: STANDBY
    deployment.microfocus.com/simple-update: ignore
  service:
    # Non-mutual authentication https port. If not specified, same as `global.externalAccessPort`. One of the two must have value.
    httpsPort:
    # During the cdf upgrade in customer MBB, it's required to used the same nodePort as before. So extend the ingress controller service to specify the nodePort
    httpsNodePort:
    external:
      # Whether create service for external traffic service. Default true.
      enable: true
      type:
      # mutual authentication https port, which is target port for nginx to listen.
      clientCertAuthPort:
      # NodePort for service. If not specified, same as clientCertAuthPort above.
      clientCertAuthNodePort:
      # If clientCertAuthPort is specified, required. Configmap which contains client CA certificate needs create by yourself in advance.
      # Multiple certificates are supported.
      sslClientCertCAsCM: ""
      # Verification depth in the client certificates chain. Default 2.
      sslVerifyDepth: 2
      # Https header name for certificate generated by nginx presented to backend service. Default X509_CERTIFICATE
      clientCertHeader: X509_CERTIFICATE
      clientCertAuthIngressHost: ""
      annotations: {}
      sourceRanges: []
      nodePortAutoAssign: false

    internal:
      # Whether create service for internal traffic service. Default false.
      enable: false
      type: LoadBalancer
      httpsPort:
      annotations: {}
      sourceRanges: []

accessLog:
  size: "10M"
  rotate: "5"

#  disableAccessLog: "true"

#nodeSelector:
#  Worker: label

tolerations: []

# default for 2
replicas: 2

labels: {}