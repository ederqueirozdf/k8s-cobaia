#
#  (c) Copyright 2018-2021 Micro Focus or one of its affiliates.
#
#  The only warranties for products and services of Micro Focus and its affiliates and licensors
#  ("Micro Focus") are as may be set forth in the express warranty statements accompanying such
#  products and services. Nothing herein should be construed as constituting an additional
#  warranty. Micro Focus shall not be liable for technical or editorial errors or omissions contained
#  herein. The information contained herein is subject to change without notice.
#
#  Except as specifically indicated otherwise, this document contains confidential information
#  and a valid license is required for possession, use or copying. If this work is provided to the
#  U.S. Government, consistent with FAR 12.211 and 12.212, Commercial Computer Software,
#  Computer Software Documentation, and Technical Data for Commercial Items are licensed
#  to the U.S. Government under vendor's standard commercial license.
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}"
  labels:
    name: "{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}"
    app: {{ template "telemetry.name" . }}
  annotations:
    deployment.microfocus.com/default-replica-count: "{{ .Values.deployment.replicas}}"
    deployment.microfocus.com/runlevel: UP
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      name: "{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}"
  serviceName: "{{- include "telemetry.fullname" . -}}"
  template:
    metadata:
      labels:
        name: "{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}"
        app: {{ template "telemetry.name" . }}
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
        prometheus.io/port: {{ .Values.telemetry.ports.http | quote }}
        prometheus.io/scrape: "true"
        prometheus.io/path: "/itom/nom/telemetry/api/v1/metrics"

    spec:
      serviceAccountName: "{{- include "telemetry.fullname" . -}}-sa"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
 
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
 
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
      terminationGracePeriodSeconds: 30
      initContainers:
        {{- include "helm-lib.waitForVault" . | nindent 8 }}
        - name: install
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.vaultInit.image }}:{{ .Values.global.vaultInit.imageTag }}
          env:
            {{- if .Values.global.vaultAppRole }}
            - name: VAULT_ROLE_ID
              value: {{ required "Required value not defined: vaultRoleId" .Values.global.vaultRoleId }}
            {{- end }}
            - name: CERT_COMMON_NAME
              value: "Common_Name:{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }},Additional_SAN:{{ required "Required value is not defined: externalAccessHost" .Values.global.externalAccessHost }}/{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}.{{ .Release.Namespace }}/{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}.{{ .Release.Namespace }}.svc/{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}-grpc/{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}-grpc.{{ .Release.Namespace }}/{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}-grpc.{{ .Release.Namespace }}.svc{{.Values.telemetry.tls.endpointIps}}"
          volumeMounts:
            - mountPath: /var/run/secrets/boostport.com
              name: vault-token
      containers:
        - name: "{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}"
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.telemetry.image }}:{{ .Values.telemetry.imageTag }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          ports:
            {{- if (not (eq (toString (default .Values.telemetry.nontls.enabled false)) "false")) }}
            - containerPort: {{ .Values.telemetry.ports.http }}
            - containerPort: {{ .Values.telemetry.ports.grpc }}
            {{- end }}
            - containerPort: {{ .Values.telemetry.ports.https }}
            - containerPort: {{ .Values.telemetry.ports.grpcs }}
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: "/itom/nom/telemetry/api/v1/health"
              port: {{ .Values.telemetry.ports.https }}
            initialDelaySeconds: 20
            timeoutSeconds: 10
            periodSeconds: 60
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: "/itom/nom/telemetry/api/v1/health"
              port: {{ .Values.telemetry.ports.https }}
            initialDelaySeconds: 5
            timeoutSeconds: 15
            periodSeconds: 5
            failureThreshold: 2
          resources:
            limits:
              cpu: "2"
              memory: "1024Mi"
            requests:
              cpu: "100m"
              memory: "512Mi"
          securityContext:
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["CHOWN", "DAC_OVERRIDE", "FSETID", "FOWNER", "MKNOD", "SETGID", "SETUID", "SETFCAP", "SETPCAP", "NET_BIND_SERVICE", "SYS_CHROOT", "KILL", "AUDIT_WRITE","NET_RAW"]
          env:
            - name: NOM_TELEMETRY_TLS_ENABLED
              value: "{{ toString .Values.telemetry.tls.enabled }}"
            - name: NOM_TELEMETRY_TLS_SERVERKEYPATH
              value: "{{ toString .Values.telemetry.tls.serverkeypath}}"
            - name: NOM_TELEMETRY_TLS_SERVERCERTPATH
              value: "{{ toString .Values.telemetry.tls.servercertpath}}"
            - name: NOM_TELEMETRY_TLS_TRUSTEDCERTPATH
              value: "{{ toString .Values.telemetry.tls.trustedcertpath}}"
            - name:  NOM_TELEMETRY_NONTLS_ENABLED
              value: "{{ toString .Values.telemetry.nontls.enabled }}"
            - name:  NOM_TELEMETRY_GRPC
              value: "{{ .Values.telemetry.ports.grpc }}"
            - name:  NOM_TELEMETRY_GRPCS
              value: "{{ .Values.telemetry.ports.grpcs }}"
            - name:  SERVER_HTTP_PORT
              value: "{{ .Values.telemetry.ports.http }}"
            - name:  SERVER_HTTPS_PORT
              value: "{{ .Values.telemetry.ports.https }}"
            - name:  NOM_TELEMETRY_TLS_CIPHERS
              value: "{{ .Values.telemetry.tls.ciphers }}"
            - name:  NOM_TELEMETRY_TLS_PROTOCOLS
              value: "{{ .Values.telemetry.tls.protocols }}"
            - name:  NOM_TELEMETRY_TLS_KEYSTORE_TYPE
              value: "{{ .Values.telemetry.tls.keystoreType }}"
            - name:  NOM_TELEMETRY_TLS_CLIENT_AUTH
              value: "{{ .Values.telemetry.tls.clientAuth }}"
            - name: NMS_SERVICE_KEYSTORE_TYPE
              value: BCFKS
            - name: ZK_HOSTNAME
              {{- if .Values.global.opsbridgeIntegration.isSelected }}
              value: "itomdipulsar-zookeeper.{{.Release.Namespace}}"
              {{- else }}
              value: "nomzk-client-svc.{{.Release.Namespace}}"
              {{- end }}
            - name: ZK_PORT
              value: "2181"
            - name: ZK_NAMESPACE
              value: "nom"
            - name: NOM_ZK_ADMIN_PASSWORD_KEY
              value: NOM_ZK_ADMIN_PASSWORD_VAULT_KEY
            {{- if .Values.global.coso.isSelected }}
            - name: ITOM_CDF_EXTERNAL_SSL_CERTS_DIR
              value: /var/opt/OV/certs
            - name: NOM_TELEMETRY_CA_DIRECTORY
              value: /var/opt/OV/telemetry-cas
            - name: LOG_PROPERTIES_LISTENER_ENABLED
              value: "false"
            {{- end }}
            - name: JVM_HEAP_MIN
              value: 512m
            - name: JVM_HEAP_MAX
              value: 2048m
            - name: IDM_SVC_SERVICE_HOST
              value: {{ include "helm-lib.getInternalIdmHost" . | default  (printf "%s%s.%s" .Values.deployment.idm.namePrefix .Values.deployment.idm.service .Release.Namespace) }}
            - name: IDM_SVC_SERVICE_PORT
              value: {{ include "helm-lib.getInternalIdmPort" . | default .Values.deployment.idm.port | quote }}
          volumeMounts:
          - name: "{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}-log-vol"
            mountPath: /var/opt/OV/log
            subPath: "{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}"
          - name: "{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}-data-vol"
            mountPath: /var/opt/OV
            subPath: "{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}"
          {{- if .Values.global.database.tlsTruststore }}
          - name: certs-volume
            mountPath: /var/opt/OV/certs
          {{- else }}
          - name: "{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}-data-vol"
            mountPath: /var/opt/OV/certs
            subPath: nom/certificates
          {{- end }}
          {{- if .Values.telemetry.tls.tlsTruststore }}
          - name: telemetry-trust-volume
            mountPath: /var/opt/OV/telemetry-cas
          {{- else }}
          - name: "{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}-data-vol"
            mountPath: /var/opt/OV/telemetry-cas
            subPath: nom/telemetry-cas
          {{- end }}
          - name: vault-token
            mountPath: /var/run/secrets/boostport.com
          - name: temp
            mountPath: /tmp
        - name: kubernetes-vault-renew
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.vaultRenew.image }}:{{ .Values.global.vaultRenew.imageTag }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          volumeMounts:
            - name: vault-token
              mountPath: /var/run/secrets/boostport.com
      restartPolicy: Always
      volumes:
      - name: "{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}-data-vol"
        {{- include "helm-lib.pvcStorage" (dict "claim" "dataVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: "{{- include "telemetry.fullname" . -}}-{{ .Values.telemetry.collector.component }}-log-vol"
        {{- include "helm-lib.pvcStorage" (dict "claim" "logVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      {{- if .Values.global.database.tlsTruststore }}
      - name: certs-volume
        configMap:
          name: {{ .Values.global.database.tlsTruststore }}
      {{- end }}
      {{- if .Values.telemetry.tls.tlsTruststore }}
      - name: telemetry-trust-volume
        configMap:
          name: {{ .Values.telemetry.tls.tlsTruststore }}
      {{- end }}
      - name: vault-token
        emptyDir: {}
      - name: temp
        emptyDir: {}
