#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

global:
  # If isDemo is true, this will allow use of ephemeral storage and other POC aspects.
  isDemo: false
  loadBalancer:
    ip:
  cluster:
    k8sProvider: cdf
  persistence:
    enabled: false
    configVolumeClaim:
  
  # RBAC 
  rbac:
    serviceAccountCreate: true
    roleCreate: true

  nodeSelector: {}
       
  # For custom server CAs (incl. for Vertica). tlsTruststore should be the name of a configMap which contains the certs.
  tlsTruststore:

  # If deployPrometheusConfig is true, CDF Monitoring Framework is assumed to be installed and will use it for metric storage
  prometheus:
    deployPrometheusConfig: true
    prometheusSelector:
      prometheus_config: "1"
    scrapeCertSecretName: "itom-di-prometheus-scrape-cert"

  docker:
    registry: docker.registry.net
    orgName: hpeswitom
    imagePullSecret: "regcred"
    imagePullPolicy: IfNotPresent
  securityContext:
    user: 1999
    group: 1999
    fsGroup: 1999
  vaultRenew:
    image: kubernetes-vault-renew
    imageTag: 0.11.0-007
  vaultInit:
    image: kubernetes-vault-init
    imageTag: 0.11.0-007
  busybox:
    image: itom-busybox
    imageTag: 1.32.0-006
  externalAccessHost: ""
  vertica:
    embedded: false
    host:
    rwuser:
    rwuserkey: ITOMDI_DBA_PASSWORD_KEY
    rouser:
    rouserkey: ITOMDI_DBA_PASSWORD_KEY
    db:
    port:
    tlsEnabled: "true"
  #Will be used as a suffix for schema names
  di:
    tenant: "provider"
    deployment: "default"
    proxy:
      nodePorts:
        https:
        pulsarssl:
  ## Configuration for Cloud support - Start
    cloud:
      externalDNS:
        enabled: false
      externalAccessHost:
        pulsar:
  ## Configuration for Cloud support - End
    logging:
      useFile: true
scheduler:
  image: itom-data-ingestion-udx-scheduler
  imageTag: 2.5.0-33
  rpmVersion: 2.5.0-33
  component: scheduler
  port: 8443
  configData:
    threads: 6
    logLevel: info
    udxLogLevel: error
    batch:
      duration: 4
      # Valid units are minutes|seconds|milliseconds|microseconds
      units: seconds
    copyRead:
      timeout: 500
      # Valid units are minutes|seconds|milliseconds|microseconds
      units: milliseconds
    receiverQueue:
      size: 2000
    enablePerformanceTest: false
    pulsar:
      tenant: "public"
      namespace: "default"
      tlsHostnameVerification: "false"
      authClass: "org.apache.pulsar.client.impl.auth.AuthenticationTls"
      enableMessageAcknowledgement: "true"
    pulsarAdmin: 
      host: itomdipulsar-proxy #This is for go scheduler
      port: 8443 #This is for go scheduler
    history:
      retention: 90 #days
    heartbeat:
      timeout: 1 #seconds
    env:
      SCHED_PULSAR_UDX_TABLE: microbatch_history
      SCHED_SMALL_TOPIC_SIZE: "0"
    scheduler:
      jdbcOpts: ""
      explicitStatementExecution: "false"    #explicitStatementExecution: "true"
      pulsarTopicAutoRefreshEnabled: "false"
      parserParameters: "flatten_arrays=True,flatten_maps=True"
      enableRestartSchedulerJob: "false"
      maxMemoryUsagePercentage: "65.0"
      maxMinutesPastLastBatchUpdate: "5.0"
      restartTimeIntervalInHours: "6"
      frameDuration: "00:00:30"
      udxPulsarClientCleanUp: "false"
      laneWorkerConnectionCloseThreshold: "15"
      vdbConnectionCloseThreshold: "100"
      udxPulsarClientCleanupThreshold: "20"
      aliveCheckTimeIntervalSeconds: "60"
      dataRetentionJobCronSchedule: "0 0 0 * * *"
      enableDataRetentionJob: "true"
      enableUdxHasMessageCheck: "false"
      copyLoadMethod: "AUTO"
      enableNodeParallelism: "true"
      enableFrameBacklogCheck: "true"
      enableMicrobatchBacklogCheck: "true"
      udxAckGroupingTimeMillis: "0"
      udxMaxMessageCount: "0"
      udxMaxStreamSizeBytes: "0"
      staggeredSleepDurationMillis: "0"    
      enableRpmVersionCheck: "true"
      supportedVerticaVersions: "v10.1.0,v10.1.1"
      enableSubscriptionCleaner: "true"
      logConfigFromConfigmap: true

      configServer:
        connectRetryDelayMs: "30000"
        clientHeartBeat: "20000"
        serverHeartBeat: "30000"
        messageBufferSizeLimitInMb: "2"
        failedEventInitialDelayMillis: "60000"
        failedEventRetryDelayMillis: "60000"


      # Set the resoruce pool the executer should use within vertica.
      # Otherwise the itom_di_stream_respool_tenant_namespace will be used.
      # Where public and default will match the global.di.tenant and global.di.namespace.
      # SCHED_VERTICA_RESOURCE_POOL: your_favorite_pool 
  resources:
    requests:
      memory: 512Mi
      cpu: 500m
    limits:
      memory: 2Gi
      cpu: 1

nodeSelector: {}
deployment:
  rbac:
    serviceAccount: "" 
## Configuration that needs to be read from other ITOM DI components - Start
proxy:
  serviceName: 
  ports:
    http: 8080
    https: 8443
    pulsar: 6650
    pulsarssl: 6651
  nodePorts:
    http: 30011
    https: 31001
    pulsar: 30050
    pulsarssl: 31051
broker:
  serviceName: "itomdipulsar-broker"
  ports:
    http: 8080
    https: 8443
    pulsar: 6650
    pulsarssl: 6651
diadmin:
  config:
    adminPort: 18443
    adminServiceName: itom-di-administration-svc
## Configuration that needs to be read from other ITOM DI components - End
