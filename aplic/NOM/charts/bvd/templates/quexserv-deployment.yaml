apiVersion: apps/v1
kind: Deployment
metadata:
  name: bvd-quexserv
  namespace: {{ .Release.Namespace }}
  annotations:
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: UP
  labels:
    service: bvd-quexserv
    app.kubernetes.io/name: bvd-quexserv
    app.kubernetes.io/managed-by: bvd-config
    app.kubernetes.io/version: {{ .Values.bvd.imageTag }}
    itom.microfocus.com/capability: bvd
    tier.itom.microfocus.com/queryServer: queryServer
spec:
  replicas: {{ .Values.bvd.quexserv.replicaCount }}
  selector:
    matchLabels:
      service: bvd-quexserv
      itom.microfocus.com/capability: bvd
  template:
    metadata:
      labels:
        service: bvd-quexserv
        itom.microfocus.com/capability: bvd
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
        {{- if .Values.global.initSecrets }}
        secret.reloader.stakater.com/reload: "{{ .Values.global.initSecrets }}"
        {{- end }}
        {{- include "bvd.monitorConfigmap" (dict "Values" .Values) | nindent 8 }}
    spec:
      affinity: {{- include "bvd.affinity" (dict "deployment" "bvd-quexserv" "Values" .Values) | nindent 10 }}
      serviceAccount: {{ .Values.deployment.rbac.serviceAccount }}
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount }}
      initContainers:
      {{- include "helm-lib.waitFor" (dict "service" "bvd-controller" "port" 4000 "Values" .Values "addSecurityContext" true) | nindent 6 }}
      - name: install
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.vaultInit.image }}:{{ .Values.global.vaultInit.imageTag }}
        env:
        {{- if .Values.global.vaultAppRole }}
        - name: "VAULT_ROLE_ID"
          value: "{{ .Values.global.vaultRoleId }}"
        {{- end }}
        - name: "CERT_COMMON_NAME"
          value: Realm:RID,Common_Name:bvd-quexserv,Additional_SAN:bvd-quexserv.{{ .Release.Namespace }}/bvd-quexserv.{{ .Release.Namespace }}.svc.cluster.local,File_Name:bvd-quexserv
        volumeMounts:
        - name: "vault-token"
          mountPath: /var/run/secrets/boostport.com
      containers:
      - name: bvd-quexserv
        args:
        - quexserv
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.bvd.image }}:{{ .Values.bvd.imageTag }}
        lifecycle:
          preStop:
            exec:
              command:
              - bash
              - -c
              - "kill -SIGTERM `ps -ef | grep -m 1 /bin/node | awk '{print $2}'`"
        livenessProbe:
          httpGet:
            path: /docker/alive
            port: 4000
            scheme: HTTPS
          initialDelaySeconds: 5
          timeoutSeconds: 5
        resources:
          requests:
            cpu: {{ .Values.bvd.quexserv.resources.requests.cpu }}
            memory: {{ .Values.bvd.quexserv.resources.requests.memory }}
          limits:
            memory: {{ .Values.bvd.quexserv.resources.limits.memory }}
            cpu: {{ .Values.bvd.quexserv.resources.limits.cpu }}
        ports:
        - containerPort: 4000
          protocol: TCP
        env:
        - name: DEBUG
          value: {{ .Values.params.debug | default "bvd:error*,bvd:audit*" | quote }}
        - name: SYSTEM_USER_ID
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.systemUID
        - name: SYSTEM_GROUP_ID
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.systemGID
        - name: "NAMESPACE"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.namespace
        - name: "APPROLE"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.approle
        - name: "ROLE_ID"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.approleid
        - name: "BVD_USE_TLS"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.UseTLS
        - name: "COLLECT_PROMETHEUS_METRICS"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.collectPrometheusMetrics
        - name: "VAULT_ADDR"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.vault_addr
        - name: "REQ_TIMEOUT"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.reqTimeout
              optional: true
        - name: "VERTICA_POOL_MAX"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbMaxPoolSize
              optional: true
        - name: "VERTICA_POOL_MIN"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbMinPoolSize
              optional: true
        volumeMounts:
          - name: vault-token
            mountPath: /var/run/secrets/boostport.com
          {{ include "bvd.certificateSecret" (dict "args" "volumeMounts" "Values" .Values) }}
          {{ include "bvd.mountForCoverageData" (dict "args" "volumeMounts" "Release" .Release "Values" .Values) }}
          {{ include "bvd.tlsTrustStore" (dict "args" "volumeMounts" "Values" .Values) }}
          {{ include "bvd.globalTlsTrustStore" (dict "args" "volumeMounts" "Values" .Values) }}
      - name: kubernetes-vault-renew
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.vaultRenew.image }}:{{ .Values.global.vaultRenew.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        volumeMounts:
          - name: vault-token
            mountPath: /var/run/secrets/boostport.com
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.global.securityContext.user | int64 }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
        fsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
      restartPolicy: Always
      affinity:
      {{- include "bvd.affinity" (dict "deployment" "bvd-quexserv" "Values" .Values) | nindent 8 -}}

      {{- with ( coalesce .Values.global.nodeSelector .Values.nodeSelector ) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      volumes:
      - name: vault-token
        emptyDir: {}
      {{ include "bvd.certificateSecret" (dict "args" "volumes" "Values" .Values) }}
      {{ include "bvd.mountForCoverageData" (dict "args" "volumes" "Release" .Release "Values" .Values) }}
      {{ include "bvd.tlsTrustStore" (dict "args" "volumes" "Values" .Values) }}
      {{ include "bvd.globalTlsTrustStore" (dict "args" "volumes" "Values" .Values) }}
