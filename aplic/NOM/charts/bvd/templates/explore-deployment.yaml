{{- if .Values.params.capability.uif }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bvd-explore-deployment
  namespace: {{ .Release.Namespace }}
  labels:
    service: bvd-explore
    app.kubernetes.io/name: bvd-explore
    app.kubernetes.io/managed-by: bvd-config
    app.kubernetes.io/version: {{ .Values.bvd.imageTag }}
    itom.microfocus.com/capability: bvd
    tier.itom.microfocus.com/explore: explore
  annotations:
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: UP
spec:
  replicas: {{ .Values.bvd.explore.replicaCount }}
  selector:
    matchLabels:
      service: bvd-explore
      itom.microfocus.com/capability: bvd
  template:
    metadata:
      labels:
        service: bvd-explore
        itom.microfocus.com/capability: bvd
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
        {{- if .Values.global.initSecrets }}
        secret.reloader.stakater.com/reload: "{{ .Values.global.initSecrets }}"
        {{- end }}
        {{- include "bvd.monitorConfigmap" (dict "Values" .Values) | nindent 8 }}
    spec:
      affinity: {{- include "bvd.affinity" (dict "deployment" "bvd-explore" "Values" .Values) | nindent 10 -}}
      {{- $vaultMount := "/var/run/secrets/boostport.com" }}
      serviceAccount: {{ .Values.deployment.rbac.serviceAccount }}
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount }}
      initContainers:
      {{- include "helm-lib.waitFor" (dict "service" "bvd-controller" "port" 4000 "Values" .Values "addSecurityContext" true) | nindent 6 }}
      - name: install
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.vaultInit.image }}:{{ .Values.global.vaultInit.imageTag }}
        env:
        {{- if .Values.global.vaultAppRole }}
        - name: "VAULT_ROLE_ID"
          value: "{{ .Values.global.vaultRoleId }}"
        {{- end }}
        - name: "CERT_COMMON_NAME"
          value: Realm:RID,Common_Name:bvd-explore,Additional_SAN:bvd-explore.{{ .Release.Namespace }}/bvd-explore.{{ .Release.Namespace }}.svc.cluster.local,File_Name:bvd-explore
        volumeMounts:
        - name: "vault-token"
          mountPath: {{ $vaultMount }}
        securityContext:
          runAsNonRoot: true
          runAsUser: {{ .Values.global.securityContext.user | int64 }}
          runAsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
      containers:
      - name: bvd-explore
        args:
        - explore
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.bvd.image }}:{{ .Values.bvd.imageTag }}
        lifecycle:
          preStop:
            exec:
              command:
              - bash
              - -c
              - "kill -SIGTERM `ps -ef | grep -m 1 /bin/node | awk '{print $2}'`"
        livenessProbe:
          httpGet:
            path: /docker/alive
            port: 4000
            scheme: HTTPS
          initialDelaySeconds: 5
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            {{- if .Values.params.exploreContextRoot }}
            path: {{ .Values.params.exploreContextRoot }}/docker/ready
            {{- else }}
            path: /dashboard/docker/ready
            {{- end }}
            port: 4000
            scheme: HTTPS
          initialDelaySeconds: 10
          timeoutSeconds: 5
        resources:
          requests:
            cpu: {{ .Values.bvd.explore.resources.requests.cpu }}
            memory: {{ .Values.bvd.explore.resources.requests.memory }}
          limits:
            memory: {{ .Values.bvd.explore.resources.limits.memory }}
            cpu: {{ .Values.bvd.explore.resources.limits.cpu }}
        ports:
        - containerPort: 4000
          protocol: TCP
        env:
        - name: DEBUG
          value: {{ .Values.params.debug | default "bvd:error*,bvd:audit*" | quote }}
        - name: SYSTEM_USER_ID
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.systemUID
        - name: SYSTEM_GROUP_ID
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.systemGID
        - name: REDIS_PWD_KEY
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.redispassword.key
        - name: "BVD_DB_USER"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbuser
        - name: "POSTGRES_PASSWORD_KEY"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbpassword.key
        - name: "BVD_DB_HOST"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbhost
        - name: "BVD_DB_PORT"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbport
        - name: "BVD_DB_NAME"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbname
        - name: "BVD_DB_SID"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbsid
        - name: "BVD_DB_TYPE"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbType
        - name: "BVD_DB_CONNECTION_STRING"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbConnectionString
        - name: "BVD_DB_CA_BASE64_KEY"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbCa.base64.key
        - name: "BVD_DB_CA_BASE64"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbCa.base64
        - name: "BVD_DB_USE_TLS"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbUseTLS
        - name: "BVD_USE_TLS"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.UseTLS
        - name: "EXPLORE_CONTEXT_ROOT"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.exploreContextRoot
        - name: "TIME_FORMAT"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.timeFormat
              optional: true
        - name: "COLLECT_PROMETHEUS_METRICS"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.collectPrometheusMetrics
        - name: "NAMESPACE"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.namespace
        - name: "APPROLE"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.approle
        - name: "ROLE_ID"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.approleid
        - name: "VAULT_ADDR"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.vault_addr
        - name: "BVD_IDM_INTEGRATION_USER"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.integration_user
        - name: "BVD_IDM_INTEGRATION_USER_PASSWORD_KEY"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.integration_user_password_key
        - name: "IDM_TRANSPORT_KEY"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.idm_transport_key
        - name: "BVD_IDM_TRANSPORT_USER"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.idm_transport_user
        - name: "IDM_ORGANIZATION"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.idm_organization
        - name: "IDM_EXTERNAL_URL"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.idm_external_url
        - name: "PROM_HOST"
          value: {{ .Values.params.prometheusHost | quote }}
        - name: "PROM_PORT"
          value: {{ .Values.params.prometheusPort | quote }}
        - name: "BVD_EMBEDDING"
          value: {{ .Values.params.securityFrames | quote }}
        - name: "HTTPS_PROXY"
          value: {{ .Values.params.httpsProxy | quote }}
        - name: "IDM_ADDR"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.idm_addr
        - name: "EXTERNALNAME"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.externalname
        - name: "EXTERNALPORT"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.externalport
        - name: "SUITELOGO"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: suite.suitelogo
              optional: true
        - name: "SUITEFAVICON"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: suite.suitefavicon
              optional: true
        - name: "SUITENAME"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: suite.suitename
              optional: true
        - name: "SUITELOGO_LARGE"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: suite.logo_large
              optional: true
        - name: "SUITE_FAMILY_COLOR"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: suite.family_color
              optional: true
        - name: "SUITE_FAMILY_NAME"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: suite.family_name
              optional: true
        - name: "SUITE_FAMILY_ICON_LETTER"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: suite.family_icon_letter
              optional: true
        - name: "SUITE_RELEASE"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: suite.release
              optional: true
        - name: "BVD_VERTICA_TLS"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.defaultVerticaTLS
              optional: true
        - name: "BVD_VERTICA_USER_KEY"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.defaultVerticaUser.key
              optional: true
        - name: "BVD_VERTICA_USER"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.defaultVerticaUser
              optional: true
        - name: "BVD_VERTICA_PW_KEY"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.defaultVerticaPW.key
              optional: true
        - name: "BVD_VERTICA_CA_BASE64_KEY"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.defaultVerticaCABase64.key
              optional: true
        - name: "BVD_VERTICA_HOST"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.defaultVerticaHost
              optional: true
        - name: "BVD_VERTICA_PORT"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.defaultVerticaPort
              optional: true
        - name: "BVD_VERTICA_DB"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.defaultVerticaDB
              optional: true
        - name: BVD_ADMIN_ROLE
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.adminrole
        - name: FEATURE_TOGGLES
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.featureToggles
        - name: "START_OF_THE_WEEK"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.startOfTheWeek
              optional: true
        - name: "HELP_PRODUCT_ID"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.helpProductId
              optional: true
        - name: "BVD_SERVICE_URL"
          value: {{ .Values.params.bvdServiceUrl | default "https://bvd-www:4000/bvd" | quote }}
        volumeMounts:
          - name: vault-token
            mountPath: {{ $vaultMount }}
          {{ include "bvd.certificateSecret" (dict "args" "volumeMounts" "Values" .Values) }}
          {{ include "bvd.tlsTrustStore" (dict "args" "volumeMounts" "Values" .Values) }}
          {{ include "bvd.globalTlsTrustStore" (dict "args" "volumeMounts" "Values" .Values) }}
          {{ include "bvd.oracleWallet" (dict "args" "volumeMounts" "Values" .Values) }}
          - name: bvd-explore-var
            mountPath: /var/bvd
            subPath: bvd/var/bvd
          {{- if (or (and .Values.global.vertica .Values.global.vertica.cert) (and .Values.global.vertica .Values.global.vertica.certEncoded)) }}
          - name: vertica-secret-volume
            mountPath: /var/bvd/vertica-ca
          {{- end }}
      - name: kubernetes-vault-renew
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.vaultRenew.image }}:{{ .Values.global.vaultRenew.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        volumeMounts:
          - name: vault-token
            mountPath: {{ $vaultMount }}
        securityContext:
          runAsNonRoot: true
          runAsUser: {{ .Values.global.securityContext.user | int64 }}
          runAsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.global.securityContext.user | int64 }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
        fsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}

      {{- with ( coalesce .Values.global.nodeSelector .Values.nodeSelector ) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      volumes:
      - name: vault-token
        emptyDir: {}
      {{ include "bvd.certificateSecret" (dict "args" "volumes" "Values" .Values) }}
      {{ include "bvd.tlsTrustStore" (dict "args" "volumes" "Values" .Values) }}
      {{ include "bvd.globalTlsTrustStore" (dict "args" "volumes" "Values" .Values) }}
      {{ include "bvd.oracleWallet" (dict "args" "volumes" "Values" .Values) }}
      - name: bvd-explore-var
        {{- include "helm-lib.pvcStorage" (dict "claim" "configVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      {{- if (or (and .Values.global.vertica .Values.global.vertica.cert) (and .Values.global.vertica .Values.global.vertica.certEncoded)) }}
      - name: vertica-secret-volume
        secret:
          secretName: vertica-secret
      {{- end }}
{{- end }}
