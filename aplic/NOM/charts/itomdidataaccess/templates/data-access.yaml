apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: itom-di-data-access
    app.kubernetes.io/managed-by: {{.Release.Name}}
    app.kubernetes.io/version: {{.Values.dataAccess.imageTag}}
    itom.microfocus.com/capability: itom-data-ingestion
    tier.itom.microfocus.com/backend: backend
  name: itom-di-data-access-dpl
  annotations:
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: UP
    {{- if and .Values.global.apiClient.authorizedClientCAs .Values.global.tlsTruststore }}
    configmap.reloader.stakater.com/reload: "{{ .Values.global.apiClient.authorizedClientCAs }},{{ .Values.global.tlsTruststore }}"
    {{- else if .Values.global.apiClient.authorizedClientCAs }}
    configmap.reloader.stakater.com/reload: "{{ .Values.global.apiClient.authorizedClientCAs }}"
    {{- else if .Values.global.tlsTruststore }}
    configmap.reloader.stakater.com/reload: "{{ .Values.global.tlsTruststore }}"
    {{- end }}
spec:
  replicas: {{ .Values.didataaccess.config.replicaCount }}
  selector:
    matchLabels:
      app: itom-di-data-access
  template:
    metadata:
      labels:
        app.kubernetes.io/name: itom-di-data-access
        app.kubernetes.io/managed-by: {{.Release.Name}}
        app.kubernetes.io/version: {{.Values.dataAccess.imageTag}}
        itom.microfocus.com/capability: itom-data-ingestion
        tier.itom.microfocus.com/backend: backend
        app: itom-di-data-access
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
        checksum/config: {{ include (print $.Template.BasePath "/data-access-configmap.yaml") . | sha256sum }}
    spec:
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.group }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
      
      serviceAccount: {{ .Values.deployment.rbac.serviceAccount | default "itom-di-data-access-sa" }}
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount | default "itom-di-data-access-sa" }}
      {{ if eq (include  "dataaccess.is_cloud_deployment" . ) "true" -}}
      {{ if .Values.didataaccess.topologySpreadConstraints.enabled -}}
      topologySpreadConstraints:
        - maxSkew: {{ .Values.didataaccess.topologySpreadConstraints.maxSkew | default 1 }}
          topologyKey: {{ .Values.didataaccess.topologySpreadConstraints.topologyKey | default "topology.kubernetes.io/zone" }}
          whenUnsatisfiable: {{ .Values.didataaccess.topologySpreadConstraints.whenUnsatisfiable | default "ScheduleAnyway" }}
          labelSelector:
            matchLabels:
              app: itom-di-data-access
      {{- end }}
      {{- end }}

      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 30
      containers:
        - name: itom-di-data-access-cnt
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.dataAccess.image }}:{{ .Values.dataAccess.imageTag }}
          {{- if .Values.didataaccess.probe.liveness.enabled }}
          livenessProbe:
            exec:
              command:
              - "/dataaccess/bin/liveness.sh"
            initialDelaySeconds: {{ .Values.didataaccess.probe.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.didataaccess.probe.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.didataaccess.probe.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.didataaccess.probe.liveness.failureThreshold }}
            successThreshold: {{ .Values.didataaccess.probe.liveness.successThreshold }}
          {{- end }}
          {{- if .Values.didataaccess.probe.readiness.enabled }}
          readinessProbe:
            exec:
              command:
              - "/dataaccess/bin/readiness.sh"
            initialDelaySeconds: {{ .Values.didataaccess.probe.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.didataaccess.probe.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.didataaccess.probe.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.didataaccess.probe.readiness.failureThreshold }}
            successThreshold: {{ .Values.didataaccess.probe.readiness.successThreshold }}
          {{- end }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          env:
          - name: gid
            value: {{ .Values.global.securityContext.fsGroup | quote }}
          - name: uid
            value: {{ .Values.global.securityContext.user | quote }}
          - name: DATAACCESS_JVM_ARGS
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.jvm.args
          - name: DATAACCESS_VERTICA_INGESTION_SERVICE_NAME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.ingestion.service.name
          - name: DATAACCESS_VERTICA_INGESTION_SERVICE_PORT
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.ingestion.service.port
          - name: DATAACCESS_VERTICA_DRIVER_CLASS_NAME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.driver-class-name
          - name: DATAACCESS_VERTICA_USERNAME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.username
          - name: DATAACCESS_VERTICA_CONNECTION_TIMEOUT
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.connection-timeout
          - name: DATAACCESS_RESOURCE_POOL
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.resource-pool
          - name: DATAACCESS_VERTICA_CONNECTION_MAX_RECONNECT_ATTEMPT_ON_FAILURE_DURING_STARTUP
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.connection.max-reconnect-attempt-on-failure-during-startup
          - name: DATAACCESS_VERTICA_CONNECTION_TIME_DELAY_BETWEEN_RETRIES_DURING_STARTUP
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.connection.time-delay-between-retries-during-startup
          - name: DATAACCESS_VERTICA_HOSTNAME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.hostname
          - name: DATAACCESS_VERTICA_PORT
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.port
          - name: DATAACCESS_VERTICA_DATABASENAME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.databasename
          - name: DATAACCESS_VERTICA_DATABASE_PASSWORD_KEY
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.password.key
          - name: DATAACCESS_CLIENT_AUTH_ENABLE
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.client.auth.enable
          - name: EXTERNAL_CA_SIGNED_CERTS_ENABLE
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.use.external.ca.signed.certs
          - name: VERTICA_SSL_ENABLE
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.vertica.ssl.enable
          - name: DATAACCESS_VERTICA_INGESTION_TLS_ENABLE
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.vertica.ingestion.tls.enable
          - name: HIKARICP_CONNECTION_MAXIMUM_LIFETIME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: hikaricp.connection.maximum.lifetime
          - name: HIKARICP_MINIMUM_IDLE_CONNECTIONS
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: hikaricp.minimum.idle.connections
          - name: HIKARICP_IDLE_SESSION_TIMEOUT
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: hikaricp.idle.session.timeout
          - name: HIKARICP_MAXIMUM_POOL_SIZE
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: hikaricp.maximum.pool.size
          - name: HIKARICP_CONNECTION_POOL_NAME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: hikaricp.connection.pool.name
          - name: TIMEZONE
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: timezone
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CONTAINER_NAME
            value: data-access
          - name: LOGCONFIG_FROM_CONFIGMAP
            valueFrom:
              configMapKeyRef:
                name: itom-di-data-access-cm
                key: dataaccess.logconfig.from.configmap
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          ports:
          - containerPort: 8443
          volumeMounts:
          - name: di-data-access-log-volume
            mountPath: /dataaccess/log
          - name: vault-token
            mountPath: /var/run/secrets/boostport.com
          - name: cm-client-certs-volume
            mountPath: /dataaccess/ssl/api-client-cas
          - name: cm-server-certs-volume
            mountPath: /dataaccess/ssl/server-cas
          - name: servercert-secret-volume
            mountPath: /dataaccess/ssl/external-ca-signed-cert
          - name: cm-logback
            mountPath: /dataaccess/app-conf/
        - name: kubernetes-vault-renew
          {{- if and .Values.global.vaultRenew.registry .Values.global.vaultRenew.orgName }}
          image: {{ .Values.global.vaultRenew.registry }}/{{ .Values.global.vaultRenew.orgName }}/{{ .Values.global.vaultRenew.image }}:{{ .Values.global.vaultRenew.imageTag }}
          {{- else }}
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.vaultRenew.image }}:{{ .Values.global.vaultRenew.imageTag }}
          {{- end }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          volumeMounts:
          - name: vault-token
            mountPath: /var/run/secrets/boostport.com
      initContainers:
      {{- include "helm-lib.waitForVault" . | nindent 6 }}
      - name: waitfor-vertica-service
        {{- if (eq (.Values.global.vertica.embedded | toString) "true") }}
        {{- $vh := "itom-di-vertica-svc" }}
        {{- $vp := "5444" -}}
        {{- $fvnode := "itom-di-vertica-svc" }}
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.busybox.image }}:{{ .Values.global.busybox.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        command: [ "sh", "-c", "until nc -z {{$fvnode}} {{$vp}} -w 5 ; do echo waiting for {{$fvnode}}:{{$vp}}...; sleep 5; done; exit 0"]
        resources: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: {{ .Values.global.securityContext.user }}
          runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        {{- else -}}
        {{- $vh := .Values.global.vertica.host }}
        {{- $vp := .Values.global.vertica.port }}
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.busybox.image }}:{{ .Values.global.busybox.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        command: [ "sh", "-c", "cmd=''; vh_local={{$vh}}; vp_local={{$vp}}; for i in $(echo $vh_local | sed 's/,/ /g' | awk '{$1=$1};1'); do cmd=$(echo $cmd '|| nc -z '$i' '$vp_local' -w 5 '); done; cmd=${cmd:3}; echo 'command is : '$cmd''; until eval $(echo $cmd); do echo 'waiting for '$vh_local' with port '$vp_local' ... '; sleep 5; done; exit 0;"]
        resources: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: {{ .Values.global.securityContext.user }}
          runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        {{- end }}
      - env:
        {{- if .Values.global.vaultAppRole }}
        - name: VAULT_ROLE_ID
          value: {{ required "Required value is not defined: vaultRoleId" .Values.global.vaultRoleId }}
        {{- end }}
        - name: CERT_COMMON_NAME
          {{- if eq (include  "dataaccess.is_cloud_deployment" . ) "false" }}
          value: "Realm:RE,Common_Name:itom-di-data-access-svc.{{ .Release.Namespace }}.svc.cluster.local,Additional_SAN:{{ .Values.global.externalAccessHost }}/itom-di-data-access-svc.{{ .Release.Namespace }}/itom-di-data-access-svc.{{ .Release.Namespace }}.svc;Realm:RID,Common_Name:itom-di-data-access-svc.{{ .Release.Namespace }}.svc.cluster.local,Additional_SAN:itom-di-data-access-svc/itom-di-data-access-svc.{{ .Release.Namespace }}/itom-di-data-access-svc.{{ .Release.Namespace }}.svc,File_Name:RID_client"
          {{- else}}
          value: "Realm:RE,Common_Name:{{ required "Required value is not defined: externalAccessHost" .Values.global.externalAccessHost }},Additional_SAN:{{ .Values.global.di.cloud.externalAccessHost.dataAccess }}/itom-di-data-access-svc.{{ .Release.Namespace }}.svc.cluster.local/itom-di-data-access-svc/itom-di-data-access-svc.{{ .Release.Namespace }}/itom-di-data-access-svc.{{ .Release.Namespace }}.svc;Realm:RID,Common_Name:itom-di-data-access-svc.{{ .Release.Namespace }}.svc.cluster.local,Additional_SAN:itom-di-data-access-svc/itom-di-data-access-svc.{{ .Release.Namespace }}/itom-di-data-access-svc.{{ .Release.Namespace }}.svc,File_Name:RID_client"
          {{- end}}
        {{- if and .Values.global.vaultInit.registry .Values.global.vaultInit.orgName }}
        image: {{ .Values.global.vaultInit.registry }}/{{ .Values.global.vaultInit.orgName }}/{{ .Values.global.vaultInit.image }}:{{ .Values.global.vaultInit.imageTag }}
        {{- else}}
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.vaultInit.image }}:{{ .Values.global.vaultInit.imageTag }}
        {{- end}}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        name: install
        resources: {}
        securityContext:
          runAsUser: {{ .Values.global.securityContext.user }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/boostport.com
          name: vault-token
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{ toYaml . }}
      {{- end }}
      volumes:
      - name: di-data-access-log-volume
        {{- include "helm-lib.pvcStorage" (dict "claim" "logVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: vault-token
        emptyDir: {}
      - name: cm-client-certs-volume
        projected:
          sources:
      {{- if .Values.didataaccess.config.dataaccess.apiClient.authorizedClientCAs }}
          - configMap:
              name: {{ .Values.didataaccess.config.dataaccess.apiClient.authorizedClientCAs }}
      {{- else if .Values.global.apiClient.authorizedClientCAs }}
          - configMap:
              name: {{ .Values.global.apiClient.authorizedClientCAs }}
      {{- end }}
      - name: servercert-secret-volume
        projected:
          sources:
      {{- if .Values.didataaccess.config.dataaccess.useExternalCASignedCerts }}
          - secret:
              {{- if .Values.didataaccess.config.dataaccess.caSignedServerCertSecretName }}
              name: {{ .Values.didataaccess.config.dataaccess.caSignedServerCertSecretName | quote }}
              {{- else }}
              name: {{ .Values.global.nginx.secretName | default "nginx-default-secret" | quote }}
              {{- end}}
      {{- end }}
      - name: cm-server-certs-volume
        projected:
          sources:
          - secret:
              name: data-access-secret
      {{- if .Values.global.tlsTruststore }}
          - configMap:
              name: {{ .Values.global.tlsTruststore }}
      {{- end }}
      - name: cm-logback
        configMap:
          name: data-access-logback-cm