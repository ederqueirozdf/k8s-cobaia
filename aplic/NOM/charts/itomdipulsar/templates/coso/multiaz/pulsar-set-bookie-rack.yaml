#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
{{ if eq (include  "pulsar.is_aws_deployment" . ) "true" -}}
{{ include "pulsar.setCurrentComponentFull" (set . "currentComponent" "pulsar-set-bookie-rack") -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "pulsar.fullname" . }}-pulsarsetbookierack-configmap"
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
data:
  pulsar-set-bookie-rack.sh: |
    #!/bin/sh

    K8S_HOST=${KUBERNETES_SERVICE_HOST}
    K8S_PORT=${KUBERNETES_SERVICE_PORT_HTTPS}
    K8S_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    K8S_NS=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    K8S_CERT_PATH=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    BOOKIE_INFO="-1"
    NODE_INFO="-1"
    BOOKIE_ZONE_INFO=""
    REGION_NAME="-1"
    BOOKIE_HOST_INFO="-1"
    max_trial_count=30;
    trial_count=0;
    list_bookie_trial_count=0;
    function logger() {
        log=$1
        level=${log,,}
        res=${@:2}
        if [[ "$level" == "warn" ]]; then
            echo -e "[$(date)] - #WARN: $res" 2>&1
        elif [[ "$level" == "info" ]]; then
            echo -e "[$(date)] - #INFO: $res" 2>&1
        elif [[ "$level" == "error" ]]; then
            echo -e "[$(date)] - #ERROR: $res" 2>&1
        elif [[ "$level" == "debug" ]]; then
            echo -e "[$(date)] - #DEBUG: $res" 2>&1
        else
            echo -e "[$(date)] - INFO:$res" 2>&1
        fi
    }
     function get_bookie_hostnames(){
        logger "info" "Extracting bookie names"
        bookie_list=$(/pulsar/bin/pulsar-admin bookies list-bookies| sed '1,2d')
        bookie_rc=$(echo $?)
        if [[ ("$bookie_rc" -ne 0) || ($(echo $bookie_list| wc -c) -le 4) ]]; then
                logger "warn" "Listing of Bookies returned non-zero return code: ${bookie_rc}."
                if [[ $list_bookie_trial_count -lt $max_trial_count ]]; then
                  logger "info" "Next trial for listing bookies will be after 10 seconds."
                  sleep 10;
                  ((list_bookie_trial_count++));
                  get_bookie_hostnames;
                else
                   logger "error" "All trials for listng bookies are exhausted! Listing bookies was unsuccessful."
                   exit 1
                fi
        else
                list_bookie_trial_count=0;
                logger "info" "Bookies listed successfully"
        fi
        logger "info" "Bookie Ids: ${bookie_list}"
        bookies=$(for i in $(echo "$bookie_list" |jq -c .bookies[].bookieId| jq -s . | jq -r '.[]'); do     echo \"$(echo $i| cut -d "." -f1)\":\"$(echo $i| cut -d ":" -f1)\",; done)
        bookie_hostname_map=$(echo "{"$(echo $bookies| sed 's/\(.*\),/\1/')"}" | jq .)
        BOOKIE_HOST_INFO=$(echo ${bookie_hostname_map} | jq -s '.')
        logger "info" "Bookie HostName Information: ${BOOKIE_HOST_INFO}"
        
     }

    function get_bookkeeper_nodes() {
        logger "info" "Extracting the node for bookkeeper pods"
        pod_curl_command='curl -G -X GET --insecure --data-urlencode "labelSelector=component=bookkeeper"  https://${K8S_HOST}:${K8S_PORT}/api/v1/namespaces/${K8S_NS}/pods --cacert ${K8S_CERT_PATH} --header "Authorization: Bearer ${K8S_TOKEN}"'
        pod_details=$(curl -G -X GET --insecure --data-urlencode "labelSelector=component=bookkeeper" https://${K8S_HOST}:${K8S_PORT}/api/v1/namespaces/${K8S_NS}/pods --cacert ${K8S_CERT_PATH} --header "Authorization: Bearer ${K8S_TOKEN}")
        pod_info_rc=$(echo $?)
        if [[ "$pod_info_rc" -ne 0 ]]; then
                logger "error" "Extracting Bookkeeper information returned non-zero return code: ${pod_info_rc}."
                exit 1
        else
               logger "info" "Bookkeeper information extracted"
               bookie_node_info=$(echo ${pod_details} | jq -c '.items[] |{bookeeperName:.spec.hostname, nodeName:.spec.nodeName, bookkeeperHostname:.spec.hostname, bookkeeperPort: .spec.containers[]|.env |select( . != null )| .[]|select(.name=="BOOKIE_PORT")|.value}')
               BOOKIE_INFO=$(echo ${bookie_node_info} | jq -s '.')
               logger "info" "Bookie Node information : ${BOOKIE_INFO}"
        fi


    }

    function get_node_zone_info() {
        logger "info" "Extracting the zone for nodes"
        node_curl_command="curl  -X  GET --insecure  --url https://${K8S_HOST}:${K8S_PORT}/api/v1/nodes --cacert ${K8S_CERT_PATH} -H \"Authorization: Bearer ${K8S_TOKEN}\""
        logger "info" "Executing ${node_curl_command}"
        node_details=$(curl -X GET --insecure --url https://${K8S_HOST}:${K8S_PORT}/api/v1/nodes --cacert ${K8S_CERT_PATH} -H "Authorization: Bearer ${K8S_TOKEN}")
        node_info_rc=$(echo $?)
        if [[ "$node_info_rc" -ne 0 ]]; then
                logger "error" "Extracting Node information returned non-zero return code: ${node_info_rc}."
                exit 1
        else
                logger "info" "Node information extracted"
                zone_node_info=$(echo ${node_details} | jq '.items[] | .metadata| {nodeName:.name, regionName:.labels."topology.kubernetes.io/region", zoneName:.labels."topology.kubernetes.io/zone"}')
                NODE_INFO=$(echo ${zone_node_info} | jq -s '.')
                logger "info" "Node Zone information : ${NODE_INFO}"
        fi

    }

    function get_bookie_region_zone_map() {
        if [[ ("$BOOKIE_INFO"!="-1") && ("$NODE_INFO"!="-1") ]]; then
            for bookie in $(echo "${BOOKIE_INFO}" | jq -c '.[]'); do
                logger "info" "Bookie Information: ${bookie}"
                bookie_node=$(echo "$bookie" | jq -r ' .nodeName')
                bookie_name=$(echo "$bookie" | jq -r ' .bookeeperName')
                bookie_hostname=$(echo "$BOOKIE_HOST_INFO"| jq -c '.[]'|jq "with_entries(select(.value|contains(\"$bookie_name\")))|.[]")
                logger "info" "Bookie HostName: ${bookie_hostname}"
                bookie_port=$(echo "$bookie" | jq -r ' .bookkeeperPort')
                for node in $(echo "${NODE_INFO}" | jq -c '.[]'); do
                    node_name=$(echo "$node" | jq -r ' .nodeName')
                    node_region=$(echo "$node" | jq -r ' .regionName')
                    node_zone=$(echo "$node" | jq -r ' .zoneName')
                    if [ "$bookie_node" == "$node_name" ]; then
                        current_zone_info="{\"bookieName\":\"$bookie_name\",\"nodeName\":\"$node_name\",\"regionName\":\"$node_region\", \"zoneName\":\"$node_zone\", \"bookieHostname\":$bookie_hostname, \"bookiePort\":\"$bookie_port\"}"
                        BOOKIE_ZONE_INFO="$BOOKIE_ZONE_INFO""$current_zone_info"
                    fi
                done
            done
            BOOKIE_ZONE_INFO=$(echo ${BOOKIE_ZONE_INFO} | jq -s '.')
            logger "info" "Bookie Zone:", "$BOOKIE_ZONE_INFO"
        else
            logger "error" "One of BOOKIE_INFO/ZONE_INFO is not set"
            exit 1
        fi
    }

    function get_unique_region_name() {
        region_names=$(echo "$BOOKIE_ZONE_INFO" | jq '[.[].regionName] | unique')
        logger "info" "Region Names: $region_names"
        no_of_region=$(echo "$region_names" | jq length)
        if [[ no_of_region -eq 1 ]]; then
            REGION_NAME=$(echo "$region_names" | jq .[0])
            REGION_NAME=$(sed -e 's/^"//' -e 's/"$//' <<<"$REGION_NAME")
        else
            logger "error" "ZERO OR MULTIPLE REGIONS [$region_names]($no_of_region) FOUND. IT IS NOT SUPPORTED CURRENTLY"
            exit 1
        fi
        echo "REGION_NAME is ",$REGION_NAME
    }


    function set_bookie_rack() {
        for bookie_info in $(echo "${BOOKIE_ZONE_INFO}" | jq -c '.[]'); do
            logger "info" "Bookie Information: $bookie_info"
            bookeeper_hostname=$(echo "$bookie_info" | jq -r ' .bookieHostname')
            bookkeeper_port=$(echo "$bookie_info" | jq -r ' .bookiePort')
            bookkeeper_region=$(echo "$bookie_info" | jq -r ' .regionName')
            bookkeeper_zone=$(echo "$bookie_info" | jq -r ' .zoneName')
            logger "info" "Executing /pulsar/bin/pulsar-admin bookies set-bookie-rack -b \"${bookeeper_hostname}:${bookkeeper_port}\" --hostname \"${bookeeper_hostname}:${bookkeeper_port}\" -g \"$bookkeeper_region\" -r \"$bookkeeper_zone\""
            set_bookie_output=$(/pulsar/bin/pulsar-admin bookies set-bookie-rack -b "${bookeeper_hostname}:${bookkeeper_port}" --hostname "${bookeeper_hostname}:${bookkeeper_port}" -g "$bookkeeper_region" -r "$bookkeeper_zone")
            rack_rc=$(echo $?)
            if [[ "$rack_rc" -ne 0 ]]; then
                logger "warn" "Setting of bookie rack returned non-zero return code: ${rack_rc}."
                if [[ $trial_count -lt $max_trial_count ]]; then
                  logger "info" "Next trial for setting bookie rack will be after 10 seconds."
                  sleep 10;
                  ((trial_count++));
                  set_bookie_rack;
                else
                   logger "error" "All trials for setting bookie rack were exhausted! Setting bookie rack was unsuccessful."
                   exit 1
                fi
            else
                trial_count=0;
                logger "info" "Bookie Rack set successfully for $bookeeper_hostname"
            fi
        done
    }

    function set_bookie_affinity() {
        logger "info" "Executing /pulsar/bin/pulsar-admin namespaces set-bookie-affinity-group public/default --primary-group $REGION_NAME"
        set_affinity=$(/pulsar/bin/pulsar-admin namespaces set-bookie-affinity-group public/default --primary-group $REGION_NAME)
        affinity_rc=$(echo $?)
        if [[ "$affinity_rc" -ne 0 ]]; then
            logger "error" "Setting of bookie affinity returned non-zero return code: ${affinity_rc}."
            exit 1
        else
            logger "info" "Bookie Affinity set successfully"
        fi

    }

    function main() {
        logger "info" "************************Starting Set Bookie Rack Script*****************"
        logger "info" "Extracting Bookeeper and Node Information"
        get_bookkeeper_nodes
        logger "info" "Extracting Node and Zone information"
        get_node_zone_info
        logger "info" "Extracting bookie HostNames"
        get_bookie_hostnames
        logger "info" "Mapping Bookkeeper and Zone information"
        get_bookie_region_zone_map
        logger "info" "Extracting number of regions"
        get_unique_region_name
        logger "info" "Setting Bookie Rack"
        set_bookie_rack
        logger "info" "Setting Bookie Affinity"
        set_bookie_affinity
        logger "info" "*****************Set Bookie Script Completed************************"
    }

    main
{{- end }}
