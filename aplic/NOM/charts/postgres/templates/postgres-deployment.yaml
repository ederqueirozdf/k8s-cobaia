{{ $namePrefix := include "namePrefix" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $namePrefix }}-postgresql
  labels:
    name: {{ $namePrefix }}-postgresql
    {{- if .Values.labels }}
    {{- toYaml .Values.labels | nindent 4 }}
    {{- end }}
  annotations:
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: DB
    deployment.microfocus.com/simple-update: ignore
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: {{ $namePrefix }}-postgresql
  template:
    metadata:
      labels:
        name: {{ $namePrefix }}-postgresql
        {{- if .Values.labels }}
        {{- toYaml .Values.labels | nindent 8 }}
        {{- end }}
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      serviceAccountName: {{ $namePrefix }}-postgresql
      {{- if (coalesce .Values.nodeSelector .Values.global.nodeSelector) }}
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- else if eq .Values.global.cluster.k8sProvider "aws" }}
      nodeSelector: {}
      {{- else if eq .Values.global.cluster.k8sProvider "cdf" }}
      nodeSelector:
        Worker: label
      {{- end }}
      terminationGracePeriodSeconds: 180
      {{- if ne .Values.global.docker.imagePullSecret "" }}
      imagePullSecrets:
        - name: {{ .Values.global.docker.imagePullSecret }}
      {{- end }}
      initContainers:
      {{- include "helm-lib.waitForVault" . | nindent 6 }}
      - name: install
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.vaultInit.image }}:{{ .Values.global.vaultInit.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        securityContext:
          runAsUser: {{ .Values.global.securityContext.user }}
        env:
        - name: CERT_COMMON_NAME
          value: "Common_Name:{{ $namePrefix }}-postgresql.{{ .Release.Namespace }},Additional_SAN:{{ $namePrefix }}-postgresql"
        volumeMounts:
        - mountPath: /var/run/secrets/boostport.com
          name: vault-token
      containers:
      - name: itom-postgresql
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.postgres.image }}:{{ .Values.postgres.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        lifecycle:
          preStop:
            exec:
#CDF:           command: ["/bin/sh", "-c", "gosu postgres psql -c CHECKPOINT && gosu postgres pg_ctl -D /var/pgdata stop -m fast"]
              command: ["/bin/sh", "/usr/local/bin/cluster/stop_postgres.sh"]
        livenessProbe:
          exec:
            command:
            - /usr/local/bin/cluster/healthcheck/check_node_liveness.sh
          initialDelaySeconds: 300
          periodSeconds: 60
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          exec:
            command:
            - /usr/local/bin/cluster/healthcheck/check_node_ready.sh
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 2
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        env:
        - name: PGDATA
          value: "/var/pgdata"
        {{- if not .Values.deployment.multipleDbs }}
        # If we DON'T inject this POSTGRES_DB env var, then startup script will create one DB per
        # injected DBA_USER (below), where dbName==dbUserName.
        - name: POSTGRES_DB
          value: {{ .Values.postgres.dbName | default "postgres" | quote }}
        {{- end }}
        - name: POSTGRES_DBA_USERS
          value: {{ .Values.postgres.dbaUsers | default "postgres:ITOM_DB_PASSWD_KEY" | quote }}
        - name: POSTGRES_USERS
          value: {{ .Values.postgres.users | quote }}
        - name: PGCTLTIMEOUT
          value: "300"
        - name: SINGLE_DB
          value: "false"
        - name: SYSTEM_USER_ID
          value: {{ .Values.global.securityContext.user |int64 | quote }}
        - name: SYSTEM_GROUP_ID
          value: {{ .Values.global.securityContext.fsGroup |int64 | quote }}
#        - name: POD_CIDR
#          valueFrom:
#            configMapKeyRef:
#              name: base-configmap         # this config map does NOT exist in Helm...
#              key: POD_CIDR
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          value: {{ .Release.Namespace }}
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_CONTAINER_NAME
          value: {{ $namePrefix }}-postgresql

        {{- if and (kindIs "bool" .Values.postgres.tlsEnabled) .Values.postgres.tlsEnabled }}
        - name: USE_SSL
          value: "on"
        - name: PGCONF_ssl_ca_file
          value: "/var/run/secrets/boostport.com/issue_ca.crt"
        - name: PGCONF_ssl_cert_file
          value: "/var/run/secrets/boostport.com/server.crt"
        - name: PGCONF_ssl_key_file
          value: "/var/run/secrets/boostport.com/server.key"
        - name: "PGCONF_ssl_prefer_server_ciphers"
          value: "true"
        - name: "PGCONF_ssl_ciphers"
          value: "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:DHE-RSA-AES128-SHA256"
        {{- else }}
        - name: USE_SSL
          value: "off"
        {{- end }}
        - name: PGCONF_autovacuum
          valueFrom:
            configMapKeyRef:
              key: default.autovacuum
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_autovacuum_naptime
          valueFrom:
            configMapKeyRef:
              key: default.autovacuum_naptime
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_autovacuum_vacuum_cost_delay
          valueFrom:
            configMapKeyRef:
              key: default.autovacuum_vacuum_cost_delay
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_checkpoint_segments
          valueFrom:
            configMapKeyRef:
              key: default.checkpoint_segments
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_default_transaction_isolation
          value: "read committed"
        - name: PGCONF_effective_cache_size
          valueFrom:
            configMapKeyRef:
              key: default.effective_cache_size
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_log_directory
          valueFrom:
            configMapKeyRef:
              key: default.log_directory
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_log_filename
          valueFrom:
            configMapKeyRef:
              key: default.log_filename
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_log_line_prefix
          valueFrom:
            configMapKeyRef:
              key: default.log_line_prefix
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_log_rotation_age
          valueFrom:
            configMapKeyRef:
              key: default.log_rotation_age
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_log_rotation_size
          valueFrom:
            configMapKeyRef:
              key: default.log_rotation_size
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_maintenance_work_mem
          valueFrom:
            configMapKeyRef:
              key: default.maintenance_work_mem
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_max_connections
          valueFrom:
            configMapKeyRef:
              key: default.max_connections
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_max_prepared_transactions
          valueFrom:
            configMapKeyRef:
              key: default.max_prepared_transactions
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_password_encryption
          valueFrom:
            configMapKeyRef:
              key: default.password_encryption
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_random_page_cost
          valueFrom:
            configMapKeyRef:
              key: default.random_page_cost
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_seq_page_cost
          valueFrom:
            configMapKeyRef:
              key: default.seq_page_cost
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_shared_buffers
          valueFrom:
            configMapKeyRef:
              key: default.shared_buffers
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_vacuum_cost_delay
          valueFrom:
            configMapKeyRef:
              key: default.vacuum_cost_delay
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_wal_buffers
          valueFrom:
            configMapKeyRef:
              key: default.wal_buffers
              name: {{ $namePrefix }}-pgconf
        - name: PGCONF_work_mem
          valueFrom:
            configMapKeyRef:
              key: default.work_mem
              name: {{ $namePrefix }}-pgconf

        ports:
        - containerPort: 5432
          name: "pg-port"
        volumeMounts:
        - name: db-vol
          mountPath: /var/pgdata
          {{- if .Values.persistence.subPath }}
          subPath: {{ .Values.persistence.subPath }}
          {{- else }}
          subPath: {{ $namePrefix }}/pgdata
          {{- end }}
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
        {{- if .Values.deployment.suiteInitScripts }}
        - mountPath: /docker-entrypoint-initdb.d/
          name: init-script-mount
        {{- end }}


      - name: kubernetes-vault-renew
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.vaultRenew.image }}:{{ .Values.global.vaultRenew.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        securityContext:
          runAsUser: {{ .Values.global.securityContext.user }}
        resources:
            limits:
              cpu: 100m
              memory: 200Mi
            requests:
              cpu: 5m
              memory: 5Mi
        volumeMounts:
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
      securityContext:
        supplementalGroups: [{{ .Values.global.securityContext.fsGroup }}]
      restartPolicy: Always
      volumes:
      {{- if .Values.persistence.dbVolumeClaim }}
      - name: db-vol
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.dbVolumeClaim }}
      {{- else }}
      - name: db-vol
        {{- include "helm-lib.pvcStorage" (dict "claim" "dbVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      {{- end }}
      - name: vault-token
        emptyDir: {}
      {{- if .Values.deployment.suiteInitScripts }}
      - name: init-script-mount
        configMap:
          name: {{ .Values.deployment.suiteInitScripts }}
      {{- end }}

      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or .Values.tolerations .Values.global.cluster.tolerations }}
      tolerations:
      {{- if .Values.tolerations }}
      {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.global.cluster.tolerations }}
      {{- toYaml .Values.global.cluster.tolerations | nindent 8 }}
      {{- end }}
      {{- end }}
