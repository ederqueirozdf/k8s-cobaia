apiVersion: v1
kind: Service
metadata:
  name: itom-di-vertica-svc
  labels:
    app.kubernetes.io/name: itom-di-vertica-svc
    app.kubernetes.io/managed-by: {{.Release.Name}}
    app.kubernetes.io/version: {{.Values.verticaImage.imageTag}}
    itom.microfocus.com/capability: itom-data-ingestion
    tier.itom.microfocus.com/database: database
    name: itom-di-vertica-svc
spec:
  ports:
    - name: vertica-port
      port: 5444
      protocol: TCP
      targetPort: 5433
  selector:
    name: itom-di-vertica-pod


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: itom-di-vertica-dpl
    app.kubernetes.io/managed-by: {{.Release.Name}}
    app.kubernetes.io/version: {{.Values.verticaImage.imageTag}}
    itom.microfocus.com/capability: itom-data-ingestion
    tier.itom.microfocus.com/database: database
  name: itom-di-vertica-dpl
  annotations:
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: DB
spec:
  replicas: {{ .Values.divertica.config.replicaCount }}
  selector:
    matchLabels:
      name: itom-di-vertica-pod
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: itom-di-vertica-dpl
        app.kubernetes.io/managed-by: {{.Release.Name}}
        app.kubernetes.io/version: {{.Values.verticaImage.imageTag}}
        itom.microfocus.com/capability: itom-data-ingestion
        tier.itom.microfocus.com/database: database
        name: itom-di-vertica-pod
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      serviceAccount: {{ .Values.deployment.rbac.serviceAccount | default "itom-di-vertica-sa" }}
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount | default "itom-di-vertica-sa" }}
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.group }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
      terminationGracePeriodSeconds: 300
      containers:
      - name:  itom-di-vertica-cnt
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.verticaImage.image }}:{{ .Values.verticaImage.imageTag }}
        {{- if .Values.divertica.probe.liveness.enabled }}
        livenessProbe:
          exec:
            command:
              - "/sharedvertica/liveness.sh"
          initialDelaySeconds: {{ .Values.divertica.probe.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.divertica.probe.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.divertica.probe.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.divertica.probe.liveness.failureThreshold }}
          successThreshold: {{ .Values.divertica.probe.liveness.successThreshold }}
        {{- end }}
        {{- if .Values.divertica.probe.startup.enabled }}
        startupProbe:
          exec:
            command:
              - "/sharedvertica/startupProbe.sh"
          initialDelaySeconds: {{ .Values.divertica.probe.startup.initialDelaySeconds }}
          periodSeconds: {{ .Values.divertica.probe.startup.periodSeconds }}
          timeoutSeconds: {{ .Values.divertica.probe.startup.timeoutSeconds }}
          failureThreshold: {{ .Values.divertica.probe.startup.failureThreshold }}
          successThreshold: {{ .Values.divertica.probe.startup.successThreshold }}
        {{- end }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        ports:
        - containerPort: 5433
        env:
        - name: _UID
          value: "{{ .Values.global.securityContext.user }}"
        - name: GID
          value: "{{ .Values.global.securityContext.fsGroup }}"
        # Vertica TLS mode can be none | prefer | required
        - name: VERTICA_TLS_MODE
          value: {{ .Values.divertica.config.tlsMode }}
        - name: DBA_PASSWORD_KEY
          value: {{ .Values.divertica.config.passwordKey }}
        # Log rotate interval can be daily | weekly | monthly
        - name: LOG_ROTATE_INTERVAL
          value: {{ .Values.divertica.config.logRotateInterval | quote }}
        - name: LOG_MAX_FILES
          value: {{ .Values.divertica.config.maxLogFiles | quote }}
        - name: MAX_CLIENT_SESSIONS
          value: {{.Values.divertica.config.maxClientSession | quote }}
        - name: LOCK_TIME_OUT
          value: "21600"
        - name: LOAD_BALANCE_POLICY
          value: NONE
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
        - mountPath: /itomdb
          name: di-vertica-volume
          subPath: di/vertica/data
        - mountPath: /opt/vertica/log
          name: di-vertica-log-volume
          subPath: di/vertica/log
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
      - name: kubernetes-vault-renew
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.vaultRenew.image }}:{{ .Values.global.vaultRenew.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        volumeMounts:
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
      restartPolicy: Always
      initContainers:
        {{- include "helm-lib.waitForVault" . | nindent 6 }}
      - env:
        {{- if .Values.global.vaultAppRole }}
        - name: VAULT_ROLE_ID
          value: {{ required "Required value is not defined: vaultRoleId" .Values.global.vaultRoleId }}
        {{- end }}
        - name: CERT_COMMON_NAME
          value: "Realm:RE,Common_Name:itom-di-vertica-svc"
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.vaultInit.image }}:{{ .Values.global.vaultInit.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        name: install
        resources: {}
        securityContext:
          runAsUser: {{ .Values.global.securityContext.user }}
          runAsGroup: {{ .Values.global.securityContext.group }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/secrets/boostport.com
          name: vault-token
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{ toYaml . }}
      {{- end }}
      volumes:
        - name: di-vertica-volume
        {{- include "helm-lib.pvcStorage" (dict "claim" "dataVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 10 }}
        - name: di-vertica-log-volume
        {{- include "helm-lib.pvcStorage" (dict "claim" "logVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 10 }}
        - name: vault-token
          emptyDir: {}
